.. _contributing:

===================
Contributing to OSD
===================

OSD is an open-source project, and as such we welcome contributions from
developers, engineers, system administrators, and users in general.

There are many ways to contribute:

Feedback
========

Feedback is very welcome! We are interested in hearing from you how! Email us
@ `info@omnivector.solutions <mailto:info@omnivector.solutions>`_.

In the case things aren't working as expected, please
`file a bug <https://github.com/omnivector-solutions/slurm-charms/issues>`_.

Reach out if you have any questions and/or suggestions.


Documentation
=============

This documentation is built using `Sphinx <https://sphinx-doc.org/>`_ and
`reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_,
and is hosted in
`GitHub <https://github.com/omnivector-solutions/osd-documentation>`_.

Sections
--------

This projects uses the following convention for section headers, from the
`rsTructuredText Primer <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#sections>`_
document::

   =================
   This is a heading
   =================

   This is a section
   =================

   This is a subsection
   --------------------

   This is a subsubsection
   ^^^^^^^^^^^^^^^^^^^^^^^

   This is a subsubsubsection
   ~~~~~~~~~~~~~~~~~~~~~~~~~~

Naming conventions
------------------

Throughout the documentation and code (specially in logs), we stick to these
naming conventions with regards to Slurm:

``SLURM``
   Schedmd Slurm project.

``slurmXXXd``
   The daemons for the Slurm component.

   For example, ``slurmd`` refers to the daemon for the compute nodes, while
   ``slurmctld`` refers to the daemon for the controller node.

``Slurm``
   Omnivector charms.


Code
====

OSD source-code is hosted in GitHub repositories. All the charms are in
`omnivector-solutions/slurm-charms <https://github.com/omnivector-solutions/slurm-charms>`_,
and a common code shared among them, called ``slurm-ops-mananger``, is hosted at
`omnivector-solutions/slurm-ops-manager <https://github.com/omnivector-solutions/slurm-ops-manager>`_.

By contributing with code development, you agree the license used.

Git usage
---------
TODO:
- linear history (always rebase with master)?
- fast forward merge?
- keep user related changes in the :ref:`changelog`
- annotated tags for releases, see :ref:`release-process` below for details

Charm development
-----------------

Slurm-ops-manager
^^^^^^^^^^^^^^^^^

Common code used in all charms should not be repeated. Instead, they should
live in this project.

After a new release of ``slurm-ops-manager``, all ``slurm-charms`` should have
a new commit to:

- update the version of ``slurm-ops-manager`` in the ``requirements.txt`` file.
- update the :ref:`changelog`.

slurm-charms
^^^^^^^^^^^^

TODO

Actions and Configurations
~~~~~~~~~~~~~~~~~~~~~~~~~~

All Juju actions, configurations, and their parameters should have a
description. This is the description that appears in the documentation pages,
after a pre-processing.

The documentation translates the ``description`` field of the actions and
configurations in the following ways:

- inline markdown code is translated to inline reStructuredText code.
- if there is a ``Note:`` text, this paragraph becomes a Sphinx ``note::``
  directive. This should be used to inform the end users of important
  information related to that action/config.
- if there is a ``Example usage:`` text, that paragraph becomes a Sphinx
  ``code-block::`` with the example given.

.. _changelog:

CHANGELOG
~~~~~~~~~

The ``CHANGELOG`` file contains notable changes for end users, not charm
developers. This means that internal changes (e.g., code related to CI,
refactoring, unit tests, etc.) should not be documented.

Changes that should be documented include:

- bug fixes
- new features
- new components
- changes in usage
- breaking changes

This file should be written in reStructuredText format and it is copied to the
documentation automatically.

There should always be one, and only one, section ``Unreleased`` in the
``CHANGELOG``. New entries should go at the top of this section.

Bats tests
~~~~~~~~~~

The Slurm Charms have an extensive suite of tests using
`Bats <https://github.com/bats-core/bats-core/>`_.

To run, make sure you have installed bats with npm/npx:

TODO: instructions to install bats.

.. code-block::

   $ JUJU_MODEL=default npx bats tests/

.. note:: This will take a some minutes to run.

.. _versioning:

Versioning
----------

The Slurm-charms and ``slurm-ops-manager`` follow a semantic versioning scheme.

.. _release-process:

Release process
---------------

slurm-charms
^^^^^^^^^^^^

TODO:
- explain changelog
- explain release script
- charmhub releases

Slurm-ops-manager
^^^^^^^^^^^^^^^^^

The release process for ``slurm-ops-manager`` is straightforward:

- create a new annotated Git tag: ``git tag --annotate --sign x.y.z``. The tag
  name should be the new version of the library, as explained in
  :ref:`versioning`.
- the message should contain a summary of the changes for that release.
- push to GitHub.
